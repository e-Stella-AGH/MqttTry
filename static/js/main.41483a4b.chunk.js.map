{"version":3,"sources":["logo.svg","Other.js","App.js","reportWebVitals.js","index.js"],"names":["id","Math","floor","random","Other","channel","useState","state","setState","message","setMessage","useEffect","subscribe","m","className","value","onChange","event","target","onClick","publish","JSON","stringify","err","console","log","style","display","flexDirection","ably","Realtime","key","App","channels","get","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAAe,I,mBCETA,EAAKC,KAAKC,MAAoB,IAAdD,KAAKE,UAEdC,EAAQ,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,EAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRN,EAAQO,WAAU,SAAAC,GAAC,OAAIH,EAAWG,QACjC,CAACR,IAYJ,OACI,gCACI,sBAAKS,UAAU,MAAf,UACE,0BAAUC,MAAOR,EAAOS,SAbb,SAACC,GACpBT,EAASS,EAAMC,OAAOH,UAad,wBAAQI,QAVL,WACXd,EAAQe,QAAQ,QAASC,KAAKC,UAAU,CAACtB,KAAIe,MAAOR,KAAS,SAACgB,GAC5DA,EAAMC,QAAQC,IAAI,SAAWD,QAAQC,IAAI,WAQnC,qBAEJ,qBAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,UAA9C,SACKP,KAAKC,UAAUb,SCvBtBoB,EAAO,I,KAAIC,UAAS,CAAEC,IAAK,mCAWlBC,MATf,WAEE,IAAM3B,EAAUwB,EAAKI,SAASC,IAAI,cAElC,OACE,cAAC,EAAD,CAAO7B,QAASA,KCDL8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.41483a4b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useEffect } from 'react';\r\n\r\nconst id = Math.floor(Math.random()*100)\r\n\r\nexport const Other = ({ channel }) => {\r\n  const [state, setState] = useState()\r\n  const [message, setMessage] = useState({})\r\n\r\n  useEffect(() => {\r\n    channel.subscribe(m => setMessage(m))\r\n  }, [channel])\r\n\r\n  const handleChange = (event) => {\r\n    setState(event.target.value)\r\n  }\r\n\r\n  const send = () => {\r\n    channel.publish('event', JSON.stringify({id, value: state}), (err) => {\r\n      err ? console.log('error') : console.log('git')\r\n    })\r\n  }\r\n\r\n  return (\r\n      <div>\r\n          <div className=\"App\">\r\n            <textarea value={state} onChange={handleChange}/>\r\n            <button onClick={send}>Send</button>\r\n        </div>\r\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n            {JSON.stringify(message)}           \r\n        </div>\r\n      </div>\r\n  )\r\n\r\n}","import logo from './logo.svg';\r\nimport './App.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { Other } from './Other';\r\nimport { Realtime } from \"ably/browser/static/ably-commonjs.js\"\r\n\r\nconst ably = new Realtime({ key: 'vVogsQ.TIFtUw:VOMpWmEg9kv7tR7K' })\r\n\r\nfunction App() {\r\n\r\n  const channel = ably.channels.get('newChannel')\r\n\r\n  return (\r\n    <Other channel={channel} />      \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}