{"version":3,"sources":["logo.svg","Other.js","useMqtt.js","App.js","reportWebVitals.js","index.js"],"names":["id","Math","floor","random","Other","client","useState","state","setState","console","log","payload","setPayload","useEffect","on","err","error","end","topic","message","toString","mqttUnSub","subscription","unsubscribe","mqttSub","subscribe","mqttPublish","context","publish","mqttDisconnect","useMqtt","className","value","onChange","event","target","onClick","JSON","stringify","style","display","flexDirection","App","setClient","clientId","substr","options","keepalive","protocolId","protocolVersion","clean","reconnectPeriod","connectTimeout","will","qos","retain","rejectUnauthorized","username","process","password","host","mqttOption","mqtt","connect","mqttConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAAe,I,YCGTA,EAAKC,KAAKC,MAAoB,IAAdD,KAAKE,UAEdC,EAAQ,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtB,EAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,QAAQC,IAAI,SAAUL,GAEtB,MCRqB,SAACA,GAEtB,MAA8BC,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KA8CA,OA5CAC,qBAAU,WACJR,IACFA,EAAOS,GAAG,SAAS,SAACC,GAClBN,QAAQO,MAAM,qBAAsBD,GACpCV,EAAOY,SAETZ,EAAOS,GAAG,WAAW,SAACI,EAAOC,GAC3B,IAAMR,EAAU,CAAEO,QAAOC,QAASA,EAAQC,YAC1CR,EAAWD,SAGd,CAACN,IAiCG,CAAEgB,UAPS,SAACC,GACjB,GAAIjB,EAAQ,CACV,IAAQa,EAAUI,EAAVJ,MACRb,EAAOkB,YAAYL,KAIHM,QAhBJ,SAACF,GACf,GAAIjB,EAAQ,CACV,IAAQa,EAAUI,EAAVJ,MACRb,EAAOoB,UAAUP,EAAOT,QAAQC,UAE9BD,QAAQC,IAAI,cAWWgB,YAzBT,SAACC,GACnB,GAAItB,EAAQ,CACV,IAAQa,EAAmBS,EAAnBT,MAAOP,EAAYgB,EAAZhB,QACfN,EAAOuB,QAAQV,EAAOP,QAEpBF,QAAQC,IAAI,cAoBwBmB,eA/BnB,WACjBxB,GACFA,EAAOY,OA6B+CN,WDxChBmB,CAAQzB,GAA1CM,EAAR,EAAQA,QAASa,EAAjB,EAAiBA,QAASE,EAA1B,EAA0BA,YAE1Bb,qBAAU,WACRW,EAAQ,CAACN,MAAO,kBACf,CAACb,IAUJ,OACI,gCACI,sBAAK0B,UAAU,MAAf,UACE,0BAAUC,MAAOzB,EAAO0B,SAXb,SAACC,GACpB1B,EAAS0B,EAAMC,OAAOH,UAWd,wBAAQI,QARL,WACTV,EAAY,CAAER,MAAO,cAAeP,QAAS0B,KAAKC,UAAU,CAACtC,KAAIO,aAO3D,qBAEJ,qBAAKgC,MAAO,CAAEC,QAAS,OAAQC,cAAe,UAA9C,SACKJ,KAAKC,UAAU3B,S,iBEeb+B,MAxCf,WAEE,MAA4BpC,mBAAS,MAArC,mBAAOD,EAAP,KAAesC,EAAf,KASMC,EAAQ,oBAAgB3C,KAAKE,SAASiB,SAAS,IAAIyB,OAAO,EAAG,IAC7DC,EAAU,CACdC,UAAW,GACXC,WAAY,OACZC,gBAAiB,EACjBC,OAAO,EACPC,gBAAiB,IACjBC,eAAgB,IAChBC,KAAM,CACJnC,MAAO,UACPP,QAAS,kCACT2C,IAAK,EACLC,QAAQ,GAEVC,oBAAoB,GAUtB,OARAV,EAAQF,SAAWA,EACnBE,EAAQW,SAAWC,oBACnBZ,EAAQa,SAAWD,mCAEnB7C,qBAAU,WACR8B,EA5BkB,SAACiB,EAAMC,GACzB,IAAMxD,EAASyD,IAAKC,QAAQH,EAAMC,GAElC,OADAlB,EAAUtC,GACHA,EAyBG2D,CAtBH,gCAsBoBlB,MAC1B,IAGD,cAAC,EAAD,CAAOzC,OAAQA,KC9BJ4D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ace534d3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useEffect } from 'react';\r\nimport { useMqtt } from './useMqtt';\r\n\r\nconst id = Math.floor(Math.random()*100)\r\n\r\nexport const Other = ({ client }) => {\r\n  const [state, setState] = useState()\r\n\r\n  console.log(\"other:\", client)\r\n\r\n  const { payload, mqttSub, mqttPublish } = useMqtt(client)\r\n\r\n  useEffect(() => {\r\n    mqttSub({topic: 'tryout/mqtt'})\r\n  }, [client])\r\n\r\n  const handleChange = (event) => {\r\n    setState(event.target.value)\r\n  }\r\n\r\n  const send = () => {\r\n      mqttPublish({ topic: 'tryout/mqtt', payload: JSON.stringify({id, state }) })\r\n  }\r\n\r\n  return (\r\n      <div>\r\n          <div className=\"App\">\r\n            <textarea value={state} onChange={handleChange}/>\r\n            <button onClick={send}>Send</button>\r\n        </div>\r\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n            {JSON.stringify(payload)}           \r\n        </div>\r\n      </div>\r\n  )\r\n\r\n}","import { useState, useEffect } from 'react'\r\n\r\nexport const useMqtt = (client) => {\r\n\r\n  const [payload, setPayload] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (client) {\r\n      client.on('error', (err) => {\r\n        console.error('Connection error: ', err);\r\n        client.end();\r\n      });\r\n      client.on('message', (topic, message) => {\r\n        const payload = { topic, message: message.toString() };\r\n        setPayload(payload);\r\n      });\r\n    }\r\n  }, [client]);\r\n\r\n  const mqttDisconnect = () => {\r\n    if (client) {\r\n      client.end();\r\n    }\r\n  }\r\n\r\n  const mqttPublish = (context) => {\r\n    if (client) {\r\n      const { topic, payload } = context;\r\n      client.publish(topic, payload);\r\n    } else {\r\n        console.log(\"no client\")\r\n    }\r\n  }\r\n\r\n  const mqttSub = (subscription) => {\r\n    if (client) {\r\n      const { topic } = subscription;\r\n      client.subscribe(topic, console.log);\r\n    } else {\r\n        console.log('no client')\r\n    }\r\n  };\r\n\r\n  const mqttUnSub = (subscription) => {\r\n    if (client) {\r\n      const { topic } = subscription;\r\n      client.unsubscribe(topic);\r\n    }\r\n  };\r\n\r\n  return { mqttUnSub, mqttSub, mqttPublish, mqttDisconnect, payload }\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport { Other } from './Other';\nimport mqtt from 'mqtt';\n\nfunction App() {\n\n  const [client, setClient] = useState(null)\n\n  const mqttConnect = (host, mqttOption) => {\n    const client = mqtt.connect(host, mqttOption);\n    setClient(client)\n    return client\n  };\n\n  const url = `ws://broker.emqx.io:8083/mqtt`;\n  const clientId = `mqttjs_ + ${Math.random().toString(16).substr(2, 8)}`\n  const options = {\n    keepalive: 30,\n    protocolId: 'MQTT',\n    protocolVersion: 4,\n    clean: true,\n    reconnectPeriod: 1000,\n    connectTimeout: 30 * 1000,\n    will: {\n      topic: 'WillMsg',\n      payload: 'Connection Closed abnormally..!',\n      qos: 0,\n      retain: false\n    },\n    rejectUnauthorized: false\n  };\n  options.clientId = clientId;\n  options.username = process.env.REACT_APP_MQTT_USERNAME;\n  options.password = process.env.REACT_APP_MQTT_PASSWORD;\n\n  useEffect(() => {\n    setClient(mqttConnect(url, options))\n  }, [])\n\n  return (\n    <Other client={client} />      \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}